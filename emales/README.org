Simulate and correct reads

#+begin_src sh
# emales.fna - emale genomes
# emales.faa - emale proteomes
# emales-reads-sim.fa - simulated with nanosim (low error rate)

# NanoSim v2.6.0
./nanosim.sh emales.fna emales-reads-sim.fa -c ../mbovis/mbovis-nanosim-profile/mbovis

# proovframe v0.9.5
# estimate error rates in reads
proovframe prf emales.fna emales-reads-sim.fa
# map proteins to reads
proovframe map -a emales.faa -o emales-reads-sim.tsv emales-reads-raw.fa
# fix frameshifts in reads
proovframe fix -o emales-reads-fix.fa emales-reads-sim.fa emales-reads-sim.tsv

# annotate genes in ref and reads, extract proteins
# Prodigal v2.6.3
prodigal -n -t emales-prdgl.train -i emales.fna
prodigal -t emales-prdgl.train -i emales.fna -o emales.gff0 -f gff 
# github.com/thackl/seq-scripts/
gff-clean emales.gff0 > emales.gff && rm emales.gff0
gff2cds --aa --fna emales.fna --type CDS --source Prodigal_v2.6.3 emales.gff > emales.faa

# sim fix 
for suf in sim fix; do
    prodigal -t emales-prdgl.train -i emales-reads-$suf.fa -o emales-reads-$suf.gff0 -f gff 
    gff-clean emales-reads-$suf.gff0 > emales-reads-$suf.gff && rm emales-reads-$suf.gff0
    gff2cds --aa --fna emales-reads-$suf.fa --type CDS --source Prodigal_v2.6.3 emales-reads-$suf.gff > emales-reads-$suf.faa
done;

# map proteins back to identify false positives
# diamond v2.0.4
diamond blastp --more-sensitive -k1 -q emales-reads-sim.faa -d emales.dmnd > emales-reads-sim-faa.tsv
diamond blastp --more-sensitive -k1 -q emales-reads-fix.faa -d emales.dmnd > emales-reads-fix-faa.tsv
#+end_src

Plot results

#+begin_src R
library(tidyverse)
library(patchwork)
library(gggenomes) # https://github.com/thackl/gggenomes

p0 <- read_fai("emales.faa")
g0 <- read_gff("emales.gff") %>% mutate(set="reference")
s0 <- read_fai("emales-reads-fix.fa")

# shift reads a little as they don't all start on ref 0
shift_by <- read_paf("emales-reads-sim.paf") %>%
  transmute(seq_id=seq_id1, by=start2-start1)

read_gene_calls <- function(pre, set){
  x <- read_gff(str_glue("{pre}.gff")) %>%
    left_join(shift_by) %>% mutate(start=start+by, end=end+by)
  y <- read_blast(str_glue("{pre}-faa.tsv"))
  x %>% left_join(y, by=c(ID="qaccver")) %>%
    mutate(
      is_fp = is.na(saccver),
      call_status = ifelse(is.na(bitscore), "false positive", "true positive"),
      set=str_replace(pre, "^.*-", ""))
}
feats <- map(c(raw="emales-reads-sim", corrected="emales-reads-fix"), read_gene_calls)
map(feats, count, is_fp, call_status)


gg_genes <- gggenomes(s0[1:3,], g0, feats) + geom_seq() +
  geom_gene(aes(fill=set), position=position_nudge(y=.1), arrow=1.5, color="white") +
  geom_gene(aes(alpha=call_status), data=use_features(raw),
    position=position_nudge(y=.25), arrow=1.5, fill="#d95f02", color="white") +
  geom_gene(aes(alpha=call_status), data=use_features(corrected),
    position=position_nudge(y=.4), arrow=1.5, fill="#1b9e77", color="white") +
  expand_limits(fill = c("reference", "raw read", "fixed read")) +
  scale_fill_brewer("Genes called on", palette="Dark2")+
  scale_alpha_manual("Gene call status", values = c("true positive"=1, "false positive"=.5)) + theme_gggenomes_clean(base_size=12) +
  guides(alpha=F, fill=F) + scale_y_continuous(expand=expansion(0,0.1))

# dev.new()

gg_genes
ggsave("emales-genes.png")


## mapping stat compact -----------------------------------------------
add_stats <- function(x){
  x %>%
    left_join(select(p0, saccver=seq_id, slen=length)) %>%
    mutate( # add info to false positive hits
      saccver = ifelse(is_fp,paste0("fp",row_number()),saccver),
      slen = ifelse(is_fp,width,slen) 
    ) %>%
    group_by(saccver) %>% arrange(desc(width)) %>%
    summarize_all(first) %>% ungroup %>%
    mutate(
      slen_bin = case_when(
        slen<150~"<150", slen>300~">300", TRUE~"150-300"),
      scov = length/slen,

      scov_bin = case_when(
        scov<.25~"<25%", scov<.75~"25-75%", scov>=.75~">75%", TRUE~"FP"))
}

k0 <- bind_rows(.id = "set",
  "raw" = add_stats(feats[["raw"]]),
  "corrected" = add_stats(feats[["corrected"]]))

r0 <- p0 %>% mutate(slen_bin = case_when(
    length<150~"<150", length>300~">300", TRUE~"150-300")) %>%
  count(slen_bin, name="ref_n")

k1 <- count(k0, set, scov_bin, slen_bin) %>%
  left_join(r0) %>%
  mutate(
    n=ifelse(scov_bin == "FP", -n, n),
    f=n/ref_n,
    scov_bin = factor(scov_bin, levels = c(">75%","25-75%","<25%","FP")),
    slen_bin = factor(slen_bin, levels = c("<150","150-300",">300")),
    set = factor(set, levels=c("raw", "corrected"))
  )

k2 <- k1 %>% group_by(set, scov_bin) %>%
  summarize(n=sum(n), ref_n=sum(r0$ref_n)) %>%
  group_by(set) %>%
  mutate(f=n/ref_n, y=(1-as.numeric(scov_bin)/4) * sum(n)/ref_n - .08)

gg_stats3 <- ggplot(k1) +
  geom_hline(yintercept=c(0,1), size=.2, color="grey50") +
  geom_col(aes(x=slen_bin, y=f, fill=set, alpha=scov_bin)) +
  geom_label(aes(x=5.5, y=y, label=sprintf("%.1f%%", round(abs(f*100), 1)),
    alpha=scov_bin), fill="white", color="white", data=k2, size=3,
    label.size=1, fontface="bold", label.padding=unit(0.15, "lines"),
    hjust=1, show.legend = FALSE) +
  geom_label(aes(x=5.5, y=y, label=sprintf("%.1f%%", round(abs(f*100), 1)),
    alpha=scov_bin, fill=set), data=k2, size=3, label.size=0,
    fontface="bold", label.padding=unit(0.15, "lines"), hjust=1,
    show.legend = FALSE) +
  scale_fill_brewer(palette="Dark2", direction = -1) +
  theme_bw() + no_grid() + 
  scale_x_discrete("Protein length (aa)", guide=guide_axis(angle=45), expand=expansion(0.5)) +
  scale_y_continuous("Recall", limits = c(-.2,1.02), breaks = c(0,1), labels=c("0%", "100%")) +
  facet_wrap(~set) +
  scale_color_manual(values = c("black", "grey50")) +
   guides(fill=FALSE) +
  scale_alpha_manual("Recall length", values=c("FP"=.15,"<25%"=.3,"25-75%"=.55,">75%"=1,"missing"=0)) 

gg_genes + gg_stats3 + plot_layout(widths=c(3,1), guides="collect") +
  plot_annotation(tag_levels = "a")

ggsave("emales-v2.pdf", width=10, height=3.5)
ggsave("emales-v2.png", width=10, height=3.5)

sessionInfo()
## R version 4.0.3 (2020-10-10)
## Platform: x86_64-pc-linux-gnu (64-bit)
## Running under: Ubuntu 20.04.1 LTS

## Matrix products: default
## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0
## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0

## locale:
##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
##  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     

## other attached packages:
##  [1] gggenomes_0.0.0.9000 thacklr_0.0.0.9000   gggenes_0.4.0       
##  [4] patchwork_1.0.1      forcats_0.5.0        stringr_1.4.0       
##  [7] dplyr_1.0.2          purrr_0.3.4          readr_1.3.1         
## [10] tidyr_1.1.2          tibble_3.0.3         ggplot2_3.3.2       
## [13] tidyverse_1.3.0     

## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.5       pillar_1.4.6     compiler_4.0.3   cellranger_1.1.0
##  [5] dbplyr_1.4.4     tools_4.0.3      ggfittext_0.8.1  jsonlite_1.7.1  
##  [9] lubridate_1.7.9  lifecycle_0.2.0  gtable_0.3.0     pkgconfig_2.0.3 
## [13] rlang_0.4.7      reprex_0.3.0     cli_2.0.2        rstudioapi_0.11 
## [17] DBI_1.1.0        haven_2.3.1      withr_2.3.0      xml2_1.3.2      
## [21] httr_1.4.2       generics_0.0.2   vctrs_0.3.4      fs_1.5.0        
## [25] hms_0.5.3        grid_4.0.3       tidyselect_1.1.0 glue_1.4.2      
## [29] R6_2.4.1         fansi_0.4.1      readxl_1.3.1     modelr_0.1.8    
## [33] blob_1.2.1       magrittr_1.5     backports_1.1.10 scales_1.1.1    
## [37] ellipsis_0.3.1   rvest_0.3.6      assertthat_0.2.1 colorspace_1.4-1
## [41] stringi_1.5.3    munsell_0.5.0    broom_0.7.1      crayon_1.3.4 
#+end_src
